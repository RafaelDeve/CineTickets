// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using proyecto.Infrastructure.Persistence;

#nullable disable

namespace proyecto.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250416052623_InitialSQLite")]
    partial class InitialSQLite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Proyecto.Domain.Entities.Entrada", b =>
                {
                    b.Property<int>("EntradaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumeroAsiento")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProyeccionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntradaId");

                    b.HasIndex("ProyeccionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Entradas");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Pago", b =>
                {
                    b.Property<int>("PagoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntradaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Monto")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("PagoId");

                    b.HasIndex("EntradaId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Pelicula", b =>
                {
                    b.Property<int>("PeliculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaEstreno")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PeliculaId");

                    b.ToTable("Peliculas");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Proyeccion", b =>
                {
                    b.Property<int>("ProyeccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sala")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProyeccionId");

                    b.HasIndex("PeliculaId");

                    b.ToTable("Proyecciones");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsAdministrador")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Entrada", b =>
                {
                    b.HasOne("Proyecto.Domain.Entities.Proyeccion", "Proyeccion")
                        .WithMany("Entradas")
                        .HasForeignKey("ProyeccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto.Domain.Entities.Usuario", "Usuario")
                        .WithMany("EntradasCompradas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proyeccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Pago", b =>
                {
                    b.HasOne("Proyecto.Domain.Entities.Entrada", "Entrada")
                        .WithMany()
                        .HasForeignKey("EntradaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrada");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Proyeccion", b =>
                {
                    b.HasOne("Proyecto.Domain.Entities.Pelicula", "Pelicula")
                        .WithMany("Proyecciones")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Pelicula", b =>
                {
                    b.Navigation("Proyecciones");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Proyeccion", b =>
                {
                    b.Navigation("Entradas");
                });

            modelBuilder.Entity("Proyecto.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("EntradasCompradas");
                });
#pragma warning restore 612, 618
        }
    }
}
